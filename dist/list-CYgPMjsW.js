import"./esm-shims-CtP6w_ML.js";import{config as e}from"./config-DYqAlsU3.js";import"./logger-BlLSmUdl.js";import{ofetch_default as t}from"./ofetch-CWQqZcqz.js";import{parseDate as n}from"./parse-date-DHsdom8D.js";import{config_not_found_default as r}from"./config-not-found-QwO11ree.js";const i={path:`/list/:routeParams?`,categories:[`reading`],example:`/readwise/list/location=new&category=article`,parameters:{routeParams:`Parameter combinations, see the description above.`},features:{requireConfig:[{name:`READWISE_ACCESS_TOKEN`,optional:!1,description:"Visit `https://readwise.io/access_token` to get your access token."}],requirePuppeteer:!1,antiCrawler:!1,supportBT:!1,supportPodcast:!1,supportScihub:!1},radar:[{source:[`read.readwise.io`],target:`/list`}],name:`Reader Document List`,maintainers:[`xbot`],handler:s,description:"Specify options (in the format of query string) in parameter `routeParams` to filter documents.\n\n| Parameter                  | Description                                                                            |   Values                                                                                    |  Default                             |\n| -------------------------- | -------------------------------------------------------------------------------------- |   ----------------------------------------------------------------------------------------- |  ----------------------------------- |\n| `location`               | The document's location.                                                               |   `new`/`later`/`shortlist`/`archive`/`feed`                                      |                                      |\n| `category`               | The document's category.                                                               |   `article`/`email`/`rss`/`highlight`/`note`/`pdf`/`epub`/`tweet`/`video` |                                      |\n| `updatedAfter`           | Fetch only documents updated after this date.                                          |   string (formatted as ISO 8601 date)                                                       ||\n| `tag`                    | The document's tag, can be specified once or multiple times.                           |||\n| `tagStrategy`            | If multiple tags are specified, should the documents match all of them or any of them. |   `any`/`all`                                                                           |  `any`                             |\n\nCustomise parameter values to fetch specific documents, for example:\n\n```\nhttps://rsshub.app/readwise/list/location=new&category=article\n```\n\nfetches articles in the Inbox.\n\n```\nhttps://rsshub.app/readwise/list/category=article&tag=shortlist&tag=AI&tagStrategy=all\n```\n\nfetches articles tagged both by `shortlist` and `AI`. "},a=`all`,o=`any`;async function s(i){if(!e.readwise||!e.readwise.accessToken)throw new r(`Readwise access token is missing`);let s=`https://readwise.io/api/v3/list/?`,c,l;if(i.req.param(`routeParams`)){let e=new URLSearchParams(i.req.param(`routeParams`)),t=e.get(`location`),n=e.get(`category`),r=e.get(`updatedAfter`);c=e.get(`tag`),l=e.get(`tagStrategy`)===o||e.get(`tagStrategy`)===a?e.get(`tagStrategy`):o,t&&(s+=`location=${t}&`),n&&(s+=`category=${n}&`),r&&(s+=`updatedAfter=${r}&`)}let u=[];async function d(n){let r=await t(n,{headers:{Authorization:`Token ${e.readwise.accessToken}`}});u.push(...r.results),r.nextPageCursor&&await d(s+`pageCursor=${r.nextPageCursor}`)}await d(s);let f=u.filter(e=>{if(!c)return!0;let t=e.tags;if(!t)return!1;if(Array.isArray(c)){if(l===o)return c.some(e=>Object.values(t).some(t=>t.name===e));if(l===a)return c.every(e=>Object.values(t).some(t=>t.name===e))}else{let e=c;return Object.values(t).some(t=>t.name===e)}return!1}).map(e=>({title:e.title,link:e.source_url,description:e.summary,pubDate:n(e.created_at),author:e.author}));return{allowEmpty:!0,title:`Readwise Reader`,link:`https://read.readwise.io`,item:f}}export{i as route};